<snippet>
	<content><![CDATA[
class LCA{
public:
	int MB=20,N,ROOT;
	vector<vector<int>> up,e;
	vector<int> depth;
	void dfs(int cur,int par) {
		up[cur][0]=par;
		for(int bit=1;bit<=MB;bit++) {
			up[cur][bit]=up[up[cur][bit-1]][bit-1];
		}
		for(int node:e[cur]) {
			if(node!=par) {
				depth[node]=depth[cur]+1;
				dfs(node,cur);
 
			}
		}
	}
	LCA(vector<vector<int>> _,int root=0){
		e=_;
		N=e.size();
		ROOT=root;
		up=vector<vector<int>>(N,vector<int>(MB+1,0));
		depth=vector<int>(N,0);
		dfs(ROOT,ROOT);
	}
	int kth(int node,int k) {
		if(k>depth[node]) return -1;
		int bit=0;
		while(k) {
			if(k%2) node=up[node][bit];
			k/=2; bit++;
		}
		return node;
	}
	int dist(int u,int v) {
		if(depth[u]>depth[v]) {
			swap(u,v);
		}
		int res=depth[v]-depth[u];
		v=kth(v,depth[v]-depth[u]);
		if(v==u) return res;
		int add=1<<(MB+1);
		for(int bit=MB;bit>=0;bit--) {
			if(up[u][bit]!=up[v][bit]) {
				u=up[u][bit];
				v=up[v][bit];
				res+=add;
			}
			add/=2;
		}
		return res+2;
	}
	int getlca(int u, int v) {
		if (depth[u] < depth[v]) swap(u, v);
		for (int i = MB; i >= 0; i--) 
			if (depth[u] - (1 << i) >= depth[v])
				u = up[u][i];
		if (u == v) return u;
		for (int i = MB; i >= 0; i--) if (up[u][i] != up[v][i])
			u = up[u][i], v = up[v][i];
		return up[u][0];
	}
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LCA</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
